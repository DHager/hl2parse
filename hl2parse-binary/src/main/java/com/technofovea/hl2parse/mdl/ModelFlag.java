/**
 * Copyright (C) 2011 Darien Hager
 *
 * This code is part of the "HL2Parse" project, and is licensed under
 * a Creative Commons Attribution-ShareAlike 3.0 Unported License. For
 * either a summary of conditions or the full legal text, please visit:
 *
 * http://creativecommons.org/licenses/by-sa/3.0/
 *
 * Permissions beyond the scope of this license may be available
 * at http://technofovea.com/ .
 */
package com.technofovea.hl2parse.mdl;

/**
 *
 * @author Darien Hager
 */
public enum ModelFlag {

    /**
     * This flag is set if no hitbox information was specified
     */
    STUDIOHDR_FLAGS_AUTOGENERATED_HITBOX(0),
    /**
     *  NOTE:  This flag is set at loadtime, not mdl build time so that we don't have to rebuild
     *  models when we change materials.
     */
    STUDIOHDR_FLAGS_USES_ENV_CUBEMAP(1),
    /**
     *  Use this when there are translucent parts to the model but we're not going to sort it
     */
    STUDIOHDR_FLAGS_FORCE_OPAQUE(2),
    /**
     *  Use this when we want to render the opaque parts during the opaque pass
     *  and the translucent parts during the translucent pass
     */
    STUDIOHDR_FLAGS_TRANSLUCENT_TWOPASS(3),
    /**
     *  This is set any time the .qc files has $staticprop in it
     *  Means there's no bones and no transforms
     */
    STUDIOHDR_FLAGS_STATIC_PROP(4),
    /**
     *  NOTE:  This flag is set at loadtime, not mdl build time so that we don't have to rebuild
     *  models when we change materials.
     */
    STUDIOHDR_FLAGS_USES_FB_TEXTURE(5),
    /**
     *  This flag is set by studiomdl.exe if a separate "$shadowlod" entry was present
     *   for the .mdl (the shadow lod is the last entry in the lod list if present)
     */
    STUDIOHDR_FLAGS_HASSHADOWLOD(6),
    /**
     *  NOTE:  This flag is set at loadtime, not mdl build time so that we don't have to rebuild
     *  models when we change materials.
     */
    STUDIOHDR_FLAGS_USES_BUMPMAPPING(7),
    /**
     *  NOTE:  This flag is set when we should use the actual materials on the shadow LOD
     *  instead of overriding them with the default one (necessary for translucent shadows)
     */
    STUDIOHDR_FLAGS_USE_SHADOWLOD_MATERIALS(8),
    /**
     *  NOTE:  This flag is set when we should use the actual materials on the shadow LOD
     *  instead of overriding them with the default one (necessary for translucent shadows)
     */
    STUDIOHDR_FLAGS_OBSOLETE(9),
    STUDIOHDR_FLAGS_UNUSED(10),
    /**
     *  NOTE:  This flag is set at mdl build time
     */
    STUDIOHDR_FLAGS_NO_FORCED_FADE(11),
    /**
     *  NOTE:  The npc will lengthen the viseme check to always include two phonemes
     */
    STUDIOHDR_FLAGS_FORCE_PHONEME_CROSSFADE(12),
    /**
     *  This flag is set when the .qc has $constantdirectionallight in it
     *  If set, we use constantdirectionallightdot to calculate light intensity
     *  rather than the normal directional dot product
     *  only valid if STUDIOHDR_FLAGS_STATIC_PROP is also set
     */
    STUDIOHDR_FLAGS_CONSTANT_DIRECTIONAL_LIGHT_DOT(13),
    /**
     *  Flag to mark delta flexes as already converted from disk format to memory format
     */
    STUDIOHDR_FLAGS_FLEXES_CONVERTED(14),
    /**
     *  Indicates the studiomdl was built in preview mode
     */
    STUDIOHDR_FLAGS_BUILT_IN_PREVIEW_MODE(15),
    /**
     *  Ambient boost (runtime flag)
     */
    STUDIOHDR_FLAGS_AMBIENT_BOOST(16),
    /**
     *  Don't cast shadows from this model (useful on first-person models)
     */
    STUDIOHDR_FLAGS_DO_NOT_CAST_SHADOWS(17),
    /**
     *  alpha textures should cast shadows in vrad on this model (ONLY prop_static!)
     */
    STUDIOHDR_FLAGS_CAST_TEXTURE_SHADOWS(18),;
    private int bitIndex;

    private ModelFlag(int bitIndex) {
        this.bitIndex = bitIndex;
    }

    public int getBitIndex() {
        return bitIndex;
    }
}
